rest.stats <- get_restricted_mean(cricinfo, players)
names(rest.stats)[1] <- "player"
players <- inner_join(players, rest.stats)
plot(players$rmean ~ players$rmedian)
rest.stats <- get_restricted_mean(cricinfo, players)
get_restricted_mean <-function(cricinfo, players) {
rmeans <- data.frame()
for (i in seq_len(nrow(cricinfo))) {
name <- as.character(cricinfo[i,1])
temp <- players %>% filter(player == name)
# calculate KM survival fit
sc.temp <- Surv(temp$balls.faced, temp$event)
scfit.temp <- survfit(sc.temp ~ 1, type = "kaplan-meier")
# remove rest. mean from table
rmstat <- as.data.frame(summary(scfit.temp)$table)
rmean <- rmstat[5,1]
rmedian <- rmstat[7,1]
rmeans <- bind_rows(rmeans, data.frame(name, rmean, rmedian))
}
return (rmeans)
}
View(players)
rest.stats <- get_restricted_mean(cricinfo, players)
players.cluster <- subset(players, select = c(runs, balls.faced, player, team, opposition, year, event, home, avg, cohort, top.team, strike.rate))
players.cluster <- players.cluster %>% group_by(player, top.team) %>% summarise(runs=sum(runs), bats = n(), outs = sum(event), meanBF=mean(balls.faced))
players.cluster$average <- players.cluster$runs / players.cluster$outs
tmp <- players.cluster %>% filter(bats <= 20 | runs < 1000)
# spread mean balls faced
meanBF <- subset(players.cluster, select = c(player, top.team, meanBF))
meanBF <- spread(meanBF, top.team, meanBF)
names(meanBF) <- c("player", "nt.meanBF", "tt.meanBF")
# spread average
average <- subset(players.cluster, select = c(player, top.team, average))
average <- spread(average, top.team, average)
names(average) <- c("player", "nt.average", "tt.average")
final.tt <- inner_join(meanBF, average)
players.cluster <- subset(players, select = c(runs, balls.faced, player, team, opposition, year, event, home, avg, cohort, top.team, strike.rate))
players.cluster <- players.cluster %>% group_by(player, home) %>% summarise(runs=sum(runs), bats = n(), outs = sum(event), meanBF=mean(balls.faced))
players.cluster$average <- players.cluster$runs / players.cluster$outs
tmp2 <- players.cluster %>% filter(bats <= 20 | runs < 1000)
tmp3 <- full_join(tmp, tmp2)
# spread mean balls faced
meanBF <- subset(players.cluster, select = c(player, home, meanBF))
meanBF <- spread(meanBF, home, meanBF)
names(meanBF) <- c("player", "away.meanBF", "home.meanBF")
# spread average
average <- subset(players.cluster, select = c(player, home, average))
average <- spread(average, home, average)
names(average) <- c("player", "away.average", "home.average")
final.ha <- inner_join(meanBF, average)
# create final dataset for cluster analysis
final <- inner_join(final.tt, final.ha, by = "player")
# remove players with insufficient data for comparison
tmp <- as.data.frame(unique(tmp3$player))
names(tmp) <- "remove"
final <- subset(final, !(player %in% tmp$remove))
# create and add subset of additional data, avg, rmean and rmedian
tmp2 <- subset(players, select = c(player, avg, team))
tmp2 <- tmp2[!duplicated(tmp2), ]
final <- inner_join(final, tmp2, by = "player")
View(final)
final <- inner_join(final.tt, final.ha, by = "player")
# remove players with insufficient data for comparison
tmp <- as.data.frame(unique(tmp3$player))
names(tmp) <- "remove"
final <- subset(final, !(player %in% tmp$remove))
# create and add subset of additional data, avg, rmean and rmedian
tmp2 <- subset(players, select = c(player, avg, cohort))
tmp2 <- tmp2[!duplicated(tmp2), ]
final <- inner_join(final, tmp2, by = "player")
players.cluster <- subset(players, select = c(runs, player, event))
players.cluster <- players.cluster %>% group_by(player) %>% summarise(runs=sum(runs), outs = sum(event))
players.cluster$calcavg <- players.cluster$runs / players.cluster$outs
players.cluster <- subset(players.cluster, select = c(player, calcavg))
final <- inner_join(final, players.cluster, by = "player")
# remove any NA rows
final <- na.omit(final)
# two metrics are created to compare the two factors
# 1. a measure of consistency
# 2. a measure of performance in tough conditions (i.e. against top teams and in away conditions)
# cap good performances in easy conditions
final <- final %>% mutate(nt.lower = ifelse(nt.average > calcavg, calcavg, nt.average))
final$topteam <- final$tt.average - final$nt.lower
final <- final %>% mutate(home.lower = ifelse(home.average > calcavg, calcavg, home.average))
final$home <- final$away.average - final$home.lower
# calculate standard deviation of home and top team averages
final$sigma <- apply(final[,c(5,13,8,15)], 1, sd)
# calculate metric 1 for consistency
final$metric1 <- final$avg * (1 - final$sigma / final$calcavg)
# calculate metric 2 for performance
final$metric2 <- final$avg * (1 + (final$topteam + final$home - final$sigma)/ final$calcavg)
names(final)
final <- subset(final, select = c(player, metric1, metric2, cohort))
write.csv(final, file="cluster_backup.csv" , row.names = FALSE)
tmp <- final$player
final <- subset(final, select = -player)
row.names(final) <- tmp
scaled.final <- scale(final)
final
scaled.final <- scale(final)
tmp <- final$player
final <- subset(final, select = -player, cohort)
row.names(final) <- tmp
final <- subset(final, select = -cohort)
scaled.final <- scale(final)
cov(scaled.final <- scale(final))
k <- kmeans(scaled.final, centers = 6, nstart = 25)
str(k)
fviz_cluster(k, data = scaled.final)
runApp()
View(scaled.final)
# create final dataset for cluster analysis
final <- inner_join(final.tt, final.ha, by = "player")
# remove players with insufficient data for comparison
tmp <- as.data.frame(unique(tmp3$player))
names(tmp) <- "remove"
final <- subset(final, !(player %in% tmp$remove))
# create and add subset of additional data, avg, rmean and rmedian
tmp2 <- subset(players, select = c(player, avg, cohort))
tmp2 <- tmp2[!duplicated(tmp2), ]
final <- inner_join(final, tmp2, by = "player")
# calculate average based on data
players.cluster <- subset(players, select = c(runs, player, event))
players.cluster <- players.cluster %>% group_by(player) %>% summarise(runs=sum(runs), outs = sum(event))
players.cluster$calcavg <- players.cluster$runs / players.cluster$outs
players.cluster <- subset(players.cluster, select = c(player, calcavg))
final <- inner_join(final, players.cluster, by = "player")
# remove any NA rows
final <- na.omit(final)
# two metrics are created to compare the two factors
# 1. a measure of consistency
# 2. a measure of performance in tough conditions (i.e. against top teams and in away conditions)
# cap good performances in easy conditions
final <- final %>% mutate(nt.lower = ifelse(nt.average > calcavg, calcavg, nt.average))
final$topteam <- final$tt.average - final$nt.lower
final <- final %>% mutate(home.lower = ifelse(home.average > calcavg, calcavg, home.average))
final$home <- final$away.average - final$home.lower
# calculate standard deviation of home and top team averages
final$sigma <- apply(final[,c(5,13,8,15)], 1, sd)
# calculate metric 1 for consistency
final$metric1 <- final$avg * (1 - final$sigma / final$calcavg)
# calculate metric 2 for performance
final$metric2 <- final$avg * (1 + (final$topteam + final$home - final$sigma)/ final$calcavg)
# prepare subset for cluster analysis
names(final)
final <- subset(final, select = c(player, metric1, metric2, cohort))
# rename row names to player names
tmp <- final$player
final <- subset(final, select = -player)
row.names(final) <- tmp
# normalize the dataset
scaled.final <- scale(final)
cov(scaled.final <- scale(final))
View(final)
write.csv(final, file="cluster_backup.csv" , row.names = TRUE)
View(final)
s <- scale(final$metric1)
View(s)
final <- subset(final, select = -cohort)
scaled.final <- scale(final)
View(scaled.final)
final$metric1 <- scale(final$metric1)
final$metric2 <- scale(final$metric2)
write.csv(final, file="cluster_backup.csv" , row.names = TRUE)
View(final)
# create final dataset for cluster analysis
final <- inner_join(final.tt, final.ha, by = "player")
# remove players with insufficient data for comparison
tmp <- as.data.frame(unique(tmp3$player))
names(tmp) <- "remove"
final <- subset(final, !(player %in% tmp$remove))
# create and add subset of additional data, avg, rmean and rmedian
tmp2 <- subset(players, select = c(player, avg, cohort))
tmp2 <- tmp2[!duplicated(tmp2), ]
final <- inner_join(final, tmp2, by = "player")
# calculate average based on data
players.cluster <- subset(players, select = c(runs, player, event))
players.cluster <- players.cluster %>% group_by(player) %>% summarise(runs=sum(runs), outs = sum(event))
players.cluster$calcavg <- players.cluster$runs / players.cluster$outs
players.cluster <- subset(players.cluster, select = c(player, calcavg))
final <- inner_join(final, players.cluster, by = "player")
# remove any NA rows
final <- na.omit(final)
# two metrics are created to compare the two factors
# 1. a measure of consistency
# 2. a measure of performance in tough conditions (i.e. against top teams and in away conditions)
# cap good performances in easy conditions
final <- final %>% mutate(nt.lower = ifelse(nt.average > calcavg, calcavg, nt.average))
final$topteam <- final$tt.average - final$nt.lower
final <- final %>% mutate(home.lower = ifelse(home.average > calcavg, calcavg, home.average))
final$home <- final$away.average - final$home.lower
# calculate standard deviation of home and top team averages
final$sigma <- apply(final[,c(5,13,8,15)], 1, sd)
# calculate metric 1 for consistency
final$metric1 <- final$avg * (1 - final$sigma / final$calcavg)
# calculate metric 2 for performance
final$metric2 <- final$avg * (1 + (final$topteam + final$home - final$sigma)/ final$calcavg)
# prepare subset for cluster analysis
names(final)
final <- subset(final, select = c(player, metric1, metric2, cohort))
# rename row names to player names
tmp <- final$player
final <- subset(final, select = -player)
row.names(final) <- tmp
View(final)
final$metric1 <- scale(final$metric1)
final$metric2 <- scale(final$metric2)
View(final)
write.csv(final, file="cluster_backup.csv" , row.names = TRUE)
final <- subset(final, select = -cohort)
scaled.final <- final
cov(scaled.final <- scale(final))
distance <- get_dist(scaled.final, method = "euclidean")
fviz_dist(distance, gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
k <- kmeans(scaled.final, centers = 6, nstart = 25)
str(k)
fviz_cluster(k, data = scaled.final)
View(scaled.final)
View(final)
final <- inner_join(final.tt, final.ha, by = "player")
# remove players with insufficient data for comparison
tmp <- as.data.frame(unique(tmp3$player))
names(tmp) <- "remove"
final <- subset(final, !(player %in% tmp$remove))
# create and add subset of additional data, avg, rmean and rmedian
tmp2 <- subset(players, select = c(player, avg, cohort))
tmp2 <- tmp2[!duplicated(tmp2), ]
final <- inner_join(final, tmp2, by = "player")
# calculate average based on data
players.cluster <- subset(players, select = c(runs, player, event))
players.cluster <- players.cluster %>% group_by(player) %>% summarise(runs=sum(runs), outs = sum(event))
players.cluster$calcavg <- players.cluster$runs / players.cluster$outs
players.cluster <- subset(players.cluster, select = c(player, calcavg))
final <- inner_join(final, players.cluster, by = "player")
# remove any NA rows
final <- na.omit(final)
# two metrics are created to compare the two factors
# 1. a measure of consistency
# 2. a measure of performance in tough conditions (i.e. against top teams and in away conditions)
# cap good performances in easy conditions
final <- final %>% mutate(nt.lower = ifelse(nt.average > calcavg, calcavg, nt.average))
final$topteam <- final$tt.average - final$nt.lower
final <- final %>% mutate(home.lower = ifelse(home.average > calcavg, calcavg, home.average))
final$home <- final$away.average - final$home.lower
# calculate standard deviation of home and top team averages
final$sigma <- apply(final[,c(5,13,8,15)], 1, sd)
# calculate metric 1 for consistency
final$metric1 <- final$avg * (1 - final$sigma / final$calcavg)
# calculate metric 2 for performance
final$metric2 <- final$avg * (1 + (final$topteam + final$home - final$sigma)/ final$calcavg)
# prepare subset for cluster analysis
names(final)
final <- subset(final, select = c(player, metric1, metric2, cohort))
# rename row names to player names
tmp <- final$player
final <- subset(final, select = -player)
row.names(final) <- tmp
# normalize the dataset
final$metric1 <- scale(final$metric1)
final$metric2 <- scale(final$metric2)
View(final)
final <- subset(final, select = -cohort)
View(final)
row.names(final) <- tmp
View(final)
scaled.final <- final
cov(scaled.final <- scale(final))
# measure distance (i.e. similarlity between players)
distance <- get_dist(scaled.final, method = "euclidean")
fviz_dist(distance, gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
k <- kmeans(scaled.final, centers = 6, nstart = 25)
str(k)
fviz_cluster(k, data = scaled.final)
runApp()
?read.csv
runApp()
?fviz_cluster
runApp()
runApp()
cluster_data <- tbl_df(read.csv("cluster_backup.csv", stringsAsFactors=FALSE, row.names = 1))
View(cluster_data)
data <- cluster_data
View(data)
data <- subset(data, select = -cohort)
View(data)
# create final dataset for cluster analysis
final <- inner_join(final.tt, final.ha, by = "player")
# remove players with insufficient data for comparison
tmp <- as.data.frame(unique(tmp3$player))
names(tmp) <- "remove"
final <- subset(final, !(player %in% tmp$remove))
# create and add subset of additional data, avg, rmean and rmedian
tmp2 <- subset(players, select = c(player, avg, cohort))
tmp2 <- tmp2[!duplicated(tmp2), ]
final <- inner_join(final, tmp2, by = "player")
# calculate average based on data
players.cluster <- subset(players, select = c(runs, player, event))
players.cluster <- players.cluster %>% group_by(player) %>% summarise(runs=sum(runs), outs = sum(event))
players.cluster$calcavg <- players.cluster$runs / players.cluster$outs
players.cluster <- subset(players.cluster, select = c(player, calcavg))
final <- inner_join(final, players.cluster, by = "player")
# remove any NA rows
final <- na.omit(final)
# two metrics are created to compare the two factors
# 1. a measure of consistency
# 2. a measure of performance in tough conditions (i.e. against top teams and in away conditions)
# cap good performances in easy conditions
final <- final %>% mutate(nt.lower = ifelse(nt.average > calcavg, calcavg, nt.average))
final$topteam <- final$tt.average - final$nt.lower
final <- final %>% mutate(home.lower = ifelse(home.average > calcavg, calcavg, home.average))
final$home <- final$away.average - final$home.lower
# calculate standard deviation of home and top team averages
final$sigma <- apply(final[,c(5,13,8,15)], 1, sd)
# calculate metric 1 for consistency
final$metric1 <- final$avg * (1 - final$sigma / final$calcavg)
# calculate metric 2 for performance
final$metric2 <- final$avg * (1 + (final$topteam + final$home - final$sigma)/ final$calcavg)
# prepare subset for cluster analysis
names(final)
final <- subset(final, select = c(player, metric1, metric2, cohort))
final$metric1 <- scale(final$metric1)
final$metric2 <- scale(final$metric2)
final
write.csv(final, file="cluster_backup.csv")
tmp <- final$player
final <- subset(final, select = -c(player, cohort))
row.names(final) <- tmp
scaled.final <- final
cov(scaled.final <- scale(final))
# measure distance (i.e. similarlity between players)
distance <- get_dist(scaled.final, method = "euclidean")
fviz_dist(distance, gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
k <- kmeans(scaled.final, centers = 6, nstart = 25)
str(k)
fviz_cluster(k, data = scaled.final)
runApp()
data <- cluster_data
View(data)
cluster_data <- tbl_df(read.csv("cluster_backup.csv", stringsAsFactors=FALSE))
tmp <- data$player
data <- cluster_data
tmp <- data$player
data <- subset(data, select = -c(player,cohort))
row.names(data) <- tmp
View(data)
data <- cluster_data
View(data)
cluster_data <- tbl_df(read.csv("cluster_backup.csv", stringsAsFactors=FALSE))
View(cluster_data)
View(final)
# create final dataset for cluster analysis
final <- inner_join(final.tt, final.ha, by = "player")
# remove players with insufficient data for comparison
tmp <- as.data.frame(unique(tmp3$player))
names(tmp) <- "remove"
final <- subset(final, !(player %in% tmp$remove))
# create and add subset of additional data, avg, rmean and rmedian
tmp2 <- subset(players, select = c(player, avg, cohort))
tmp2 <- tmp2[!duplicated(tmp2), ]
final <- inner_join(final, tmp2, by = "player")
# calculate average based on data
players.cluster <- subset(players, select = c(runs, player, event))
players.cluster <- players.cluster %>% group_by(player) %>% summarise(runs=sum(runs), outs = sum(event))
players.cluster$calcavg <- players.cluster$runs / players.cluster$outs
players.cluster <- subset(players.cluster, select = c(player, calcavg))
final <- inner_join(final, players.cluster, by = "player")
# remove any NA rows
final <- na.omit(final)
# two metrics are created to compare the two factors
# 1. a measure of consistency
# 2. a measure of performance in tough conditions (i.e. against top teams and in away conditions)
# cap good performances in easy conditions
final <- final %>% mutate(nt.lower = ifelse(nt.average > calcavg, calcavg, nt.average))
final$topteam <- final$tt.average - final$nt.lower
final <- final %>% mutate(home.lower = ifelse(home.average > calcavg, calcavg, home.average))
final$home <- final$away.average - final$home.lower
# calculate standard deviation of home and top team averages
final$sigma <- apply(final[,c(5,13,8,15)], 1, sd)
# calculate metric 1 for consistency
final$metric1 <- final$avg * (1 - final$sigma / final$calcavg)
# calculate metric 2 for performance
final$metric2 <- final$avg * (1 + (final$topteam + final$home - final$sigma)/ final$calcavg)
# prepare subset for cluster analysis
names(final)
final <- subset(final, select = c(player, metric1, metric2, cohort))
# normalize the dataset
final$metric1 <- scale(final$metric1)
final$metric2 <- scale(final$metric2)
write.csv(final, file="cluster_backup.csv", row.names = FALSE)
tmp <- final$player
final <- subset(final, select = -c(player, cohort))
row.names(final) <- tmp
scaled.final <- final
cov(scaled.final <- scale(final))
# measure distance (i.e. similarlity between players)
distance <- get_dist(scaled.final, method = "euclidean")
fviz_dist(distance, gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
k <- kmeans(scaled.final, centers = 6, nstart = 25)
str(k)
fviz_cluster(k, data = scaled.final)
cluster_data <- tbl_df(read.csv("cluster_backup.csv", stringsAsFactors=FALSE))
View(cluster_data)
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp('shiny-quickstart-2/shiny-quickstart-2/code/04-isolate.R')
runApp('shiny-quickstart-2/shiny-quickstart-2/code/05-actionButton.R')
runApp('shiny-quickstart-2/shiny-quickstart-2/code/07-eventReactive.R')
runApp()
runApp()
runApp('shiny-quickstart-2/shiny-quickstart-2/code/07-eventReactive.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("shinythemes")
library(shinytheme, warn.conflicts=FALSE, quietly=TRUE)
library(shinythemes, warn.conflicts=FALSE, quietly=TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
sc <- Surv(players$balls.faced, players$event)
players <- tbl_df(read.csv("players_backup.csv", stringsAsFactors=FALSE))
cluster_data <- tbl_df(read.csv("cluster_backup.csv", stringsAsFactors=FALSE))
View(cluster_data)
rm(players)
rm(custer_data)
rm(cluster_data)
runApp()
library(tidyr, warn.conflicts=FALSE, quietly=TRUE)
library(readr, warn.conflicts=FALSE, quietly=TRUE)
library(dplyr, warn.conflicts=FALSE, quietly=TRUE)
library(ggplot2, warn.conflicts=FALSE, quietly=TRUE)
library(shiny, warn.conflicts=FALSE, quietly=TRUE)
library(survival, warn.conflicts=FALSE, quietly=TRUE)
library(survminer, warn.conflicts=FALSE, quietly=TRUE)
library(DT, warn.conflicts=FALSE, quietly=TRUE)
library(cluster, warn.conflicts=FALSE, quietly=TRUE)
library(factoextra, warn.conflicts=FALSE, quietly=TRUE)
library(shinythemes, warn.conflicts=FALSE, quietly=TRUE)
runApp()
runApp()
players <- tbl_df(read.csv("players_backup.csv", stringsAsFactors=FALSE))
cluster_data <- tbl_df(read.csv("cluster_backup.csv", stringsAsFactors=FALSE))
runApp()
sc <- Surv(players$balls.faced, players$event)
fit <- survfit(sc ~ 1, type = "kaplan-meier")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages('rsconnect')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='thekotecha', token='98E0958C850CD8DB511FEC379BB23C3F', secret='eiFwI8I+EqxN3w8ST6ZeqIVSOv6EYxl9GlWRmG9K')
library(rsconnect)
rsconnect::deployApp('D:/Github/Data_Test_Cricket/app.R')
library(rsconnect)
rsconnect::deployApp('D:/Github/Data_Test_Cricket')
library(rsconnect)
rsconnect::deployApp('D:/Github/Data_Test_Cricket')
rsconnect::showLogs() f
rsconnect::showLogs()
rsconnect::showLogs()
grounds <- tbl_df(read.csv("data/supp_grounds.csv", stringsAsFactors=FALSE))
cricinfo <- tbl_df(read.csv("data/supp_cricinfo.csv", stringsAsFactors=FALSE))
setwd("D:/Github/Data_Test_Cricket")
shiny::runApp()
runApp()
runApp()
