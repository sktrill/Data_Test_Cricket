{
    "collab_server" : "",
    "contents" : "library(tidyr, warn.conflicts=FALSE, quietly=TRUE)\nlibrary(readr, warn.conflicts=FALSE, quietly=TRUE)\nlibrary(dplyr, warn.conflicts=FALSE, quietly=TRUE)\nlibrary(stringr, warn.conflicts=FALSE, quietly=TRUE)\nlibrary(xml2, warn.conflicts=FALSE, quietly=TRUE)\nlibrary(rvest, warn.conflicts=FALSE, quietly=TRUE)\nlibrary(RColorBrewer, warn.conflicts=FALSE, quietly=TRUE)\nlibrary(ggplot2, warn.conflicts=FALSE, quietly=TRUE)\n# survival analysis packages\nlibrary(survival, warn.conflicts=FALSE, quietly=TRUE)\nlibrary(survminer, warn.conflicts=FALSE, quietly=TRUE)\nlibrary(rms, warn.conflicts=FALSE, quietly=TRUE)\nlibrary(flexsurv, warn.conflicts=FALSE, quietly=TRUE)\nlibrary(e1071, warn.conflicts=FALSE, quietly=TRUE) # random stats functions\n# cluster analyis packages\nlibrary(cluster, warn.conflicts=FALSE, quietly=TRUE)\nlibrary(factoextra, warn.conflicts=FALSE, quietly=TRUE)\nlibrary(purrr, warn.conflicts=FALSE, quietly=TRUE)\n\n# --------------------------------------------\n# Functions\n# --------------------------------------------\n# purpose: scrapes data from web page given html and css selector\n# inputs: html (web page link), selector (css selector), name, team\n# output: data frame of scraped table\nscrape_player_data <-function(html, selector, name, team) {\n  html_cast <- html_nodes(html, selector)\n  cast <- html_table(html_cast[4], fill = TRUE)\n  temp <- as.data.frame(cast)\n  temp$name <- name\n  temp$team <- team\n\n    # remove unnecessary column names and data\n  temp <- temp[-c(10, 14)]\n  \n  return (temp)\n}\n\n# purpose: cleans scraped data in order to perform quick joins\n# inputs: temp, df of player data\n# output: temp, df of cleansed player data\nclean_player_data <-function(temp) {\n  # rename column variables\n  names(temp) <- c(\"runs\", \"minutes\", \"balls.faced\", \"fours\", \"sixes\", \"strike.rate\", \"position\",\n                      \"dismissal\", \"inninng\", \"opposition\", \"ground\", \"date\", \"player\", \"team\")\n\n  # remove asterisk for 'not out'\n  temp$runs <- gsub (\"\\\\*\",\"\",temp$runs)\n  \n  # remove 'v ' in front of countries\n  temp$opposition <- gsub (\"\\\\v \",\"\",temp$opposition)\n  \n  # create separate column for year (useful for cohort analysis)\n  temp$year <- str_sub(temp$date, start = -4)\n    \n  # fix variable types and assign factors\n  temp$runs <- as.numeric(temp$runs)\n  temp$minutes <- as.numeric(temp$minutes)\n  temp$balls.faced <- as.numeric(temp$balls.faced)\n  temp$fours <- as.numeric(temp$fours)\n  temp$sixes <- as.numeric(temp$sixes)\n  temp$strike.rate <- as.numeric(temp$strike.rate)\n  temp$position <- as.numeric(temp$position)\n  temp$dismissal <- as.factor(temp$dismissal)\n  temp$inninng <- as.numeric(temp$inninng)\n  temp$opposition <- as.character(temp$opposition)\n  temp$ground <- as.character(temp$ground)\n  temp$date <- as.character(temp$date)\n  temp$player <- as.character(temp$player)\n  temp$team <- as.factor(temp$team)\n  temp$year <- as.numeric(temp$year)\n  sum(is.na(temp))\n  temp <- na.omit(temp)\n  sum(is.na(temp))\n  \n  return (temp)\n  }\n\n\n# purpose: traverse through assembled links to prepare players dataset\n# inputs: cricinfo - df of player cricinfo ids, selector - of html dom node\n# output: temp, df of all player data\nload_player_data <-function(cricinfo, selector) {\n  players <- data.frame()\n  u1 = \"http://stats.espncricinfo.com/ci/engine/player/\"\n  u3 = \".html?class=1;filter=advanced;orderby=balls_faced;template=results;type=batting;view=innings\"\n\n  for (i in seq_len(nrow(cricinfo))) {\n    # concatenate html link\n    u2 = as.character(cricinfo[i,4])\n    link = paste (u1, u2, u3, sep = \"\")\n    print(link)\n    \n    # scrape and clean player data from espn cricinfo\n    html <- read_html(link)\n    temp <- scrape_player_data(html, selector,as.character(cricinfo[i,1]),as.character(cricinfo[i,6]))\n    temp <- clean_player_data(temp)\n    players <- bind_rows(players, temp)\n  }\n  \n  return (players)\n}\n\n\n# purpose: calculate restricted means of survival function of all players\n# inputs: cricinfo - df of player cricinfo ids, players - df of all data\n# output: rmeans, df of restricted means and median for each player\nget_restricted_mean <-function(cricinfo, players) {\n  rmeans <- data.frame()\n  \n  for (i in seq_len(nrow(cricinfo))) {\n    name <- as.character(cricinfo[i,1])\n    temp <- players %>% filter(player == name)\n    \n    # calculate KM survival fit\n    sc.temp <- Surv(temp$balls.faced, temp$event)\n    scfit.temp <- survfit(sc.temp ~ 1, type = \"kaplan-meier\")\n    \n    # remove rest. mean from table\n    rmstat <- as.data.frame(summary(scfit.temp)$table)\n    rmean <- rmstat[5,1]\n    rmedian <- rmstat[7,1]\n    rmeans <- bind_rows(rmeans, data.frame(name, rmean, rmedian))\n  }\n  \n  return (rmeans)\n  \n}\n\n# helper logical exclusion function\n`%notin%` <- function(x,y) !(x %in% y) \n\n  \n# --------------------------------------------\n# Scraping\n# --------------------------------------------\nsetwd(\"D:/Github/Data_Test_Cricket\")\n\n# load supplemental data for grounds and cricinfo html links\ngrounds <- tbl_df(read.csv(\"data/supp_grounds.csv\", stringsAsFactors=FALSE))\ncricinfo <- tbl_df(read.csv(\"data/supp_cricinfo.csv\", stringsAsFactors=FALSE))\n\n# players <- tbl_df(read.csv(\"data/players_backup.csv\", stringsAsFactors=FALSE))\n# scrape data directly from ESPN Cricinfo's StatsGuru website: http://stats.espncricinfo.com\n# selector <- \".engineTable:nth-child(5) td \"\nselector <- \"table\"\n\n# load all player data, 15913 rows of 15 variables\nplayers <- load_player_data (cricinfo, selector)\n\n\n# --------------------------------------------\n# Wrangling\n# --------------------------------------------\n\nsum(is.na(players))\n\n# identify censored observations that our lost from the sample, \n# in our context these our innings where the batsman remains 'not out'\n# event (out) = 1, censored event (not out) = 0\nplayers$event <- 1\nplayers$event[players$dismissal == \"not out\"] <- 0\n\n# add country of ground, join by 'ground'\nplayers <- inner_join(players, grounds)\n\n# add whether playing home (1) or away (0)\nplayers$home <- 0\nplayers$home [players$country == players$team] <- 1\n\n# fix for Pakistani players who haven't been able to play at home since terror attacks, home = UAE\nplayers$home[players$team == \"Pakistan\" & players$country == \"UAE\"] <- 1\n\n# identify strike rates\nplayers$goodsr <- as.integer(players$strike.rate > median(players$strike.rate))\n\n# identify if batting in first or second innings of the team\nplayers$first <- 2\nplayers$first[players$inninng %in% c(1,2)] <- 1\n\n# add cohort class, average and start year, join by 'player', 'team'\nplayers <- inner_join(players, cricinfo)\n\n# add variable for number of years played\nplayers$years.played <- players$year - players$start\n\n# remove unnecessary columns / variables\nnames(players)\nplayers <- subset(players, select = -c(fours, sixes, date, ground, espnid))\n\n# remove non national teams (ICC World XI)\nplayers <- players %>% filter(opposition != \"ICC World XI\")\n\n# remove data for any positions below 6, likely not enough balls to face in the test\nplayers <- players %>% filter(position < 6)\n\n# include variable for top teams by decade (according to historical test rankings), 1 for top teams\nplayers$top.team <- 0\nplayers$top.team[players$year < 1970] <- 1\nplayers$top.team[players$year < 1970 & players$opposition == \"India\" ] <- 0\nplayers$top.team[players$opposition == \"West Indies\" & players$year <= 1990] <- 1\nplayers$top.team[players$opposition == \"Pakistan\" & players$year <= 1996 & players$year >= 1984] <- 1\nplayers$top.team[players$opposition == \"Pakistan\" & players$year <= 2003 & players$year >= 1999] <- 1\nplayers$top.team[players$opposition == \"South Africa\"] <- 1\nplayers$top.team[players$opposition == \"South Africa\" & players$year <= 2009 & players$year >= 2006] <- 0\nplayers$top.team[players$opposition == \"Australia\" & players$year <= 1977] <- 1\nplayers$top.team[players$opposition == \"Australia\" & players$year >= 1993] <- 1\nplayers$top.team[players$opposition == \"New Zealand\" & players$year <= 1986 & players$year >= 1980] <- 1\nplayers$top.team[players$opposition == \"England\" & players$year <= 1971] <- 1\nplayers$top.team[players$opposition == \"England\" & players$year <= 1982 & players$year >= 1977] <- 1\nplayers$top.team[players$opposition == \"England\" & players$year <= 2005 & players$year >= 2004] <- 1\nplayers$top.team[players$opposition == \"England\" & players$year >= 2009] <- 1\nplayers$top.team[players$opposition == \"India\" & players$year >= 2006] <- 1\nplayers$top.team[players$opposition == \"India\" & players$year >= 2006] <- 1\nplayers$top.team[players$opposition == \"Sri Lanka\" & players$year <= 2009 & players$year >= 2002] <- 1\n\n\n# save back up in case of server issues\n# write.csv(players, file=\"players_backup.csv\" , row.names = FALSE)\n\n# --------------------------------------------\n# Exploratory Analysis\n# --------------------------------------------\n\n# explore different cuts of the data to explore impact of variables\ntemp <- players %>% group_by(team, opposition) %>% summarise(mean=mean(runs), meanBf=mean(balls.faced), n = n())\ntemp <- players %>% group_by(player, opposition, home) %>% summarise(mean=mean(runs), meanBf=mean(balls.faced), n = n())\ntemp <- players %>% group_by(player, home) %>% summarise(mean=mean(runs), meanBf=mean(balls.faced), n = n())\ntemp <- players %>% group_by(top.team, home) %>% summarise(mean=mean(runs),  meanBf=mean(balls.faced), n = n())\ntemp <- players %>% group_by(first, home) %>% summarise(mean=mean(runs), meanBf=mean(balls.faced), n = n())\ntemp <- players %>% group_by(cohort, top.team) %>% summarise(mean=mean(runs),  meanBf=mean(balls.faced), n = n())\ntemp <- players %>% group_by(team, top.team) %>% summarise(mean=mean(runs),  meanBf=mean(balls.faced), n = n())\ntemp <- players %>% group_by(position, top.team) %>% summarise(mean=mean(runs),  meanBf=mean(balls.faced), n = n())\ntemp <- players %>% group_by(years.played) %>% summarise(mean=mean(runs),  meanBf=mean(balls.faced), n = n())\ntemp <- players %>% group_by(team, years.played) %>% summarise(mean=mean(runs),  meanBf=mean(balls.faced), n = n())\nsummary(players)\ndim(players)\nrm(temp)\n\n# graph impact of key variables\nhist(players$balls.faced) # distribution looks exponential\nhist(players$runs)\nhist(players$minutes)\nplot(density(players$balls.faced))\nplot(density(players$minutes))\nplot(density(players$years.played))\ntable(players$country)\ntable(players$team)\ntable(players$home)\ntable(players$top.team)\ntable(players$cohort)\ntable(players$first)\ntable(players$event)\n\n# explore relationships between variables\nplot(players$balls.faced ~ players$position)\nplot(players$balls.faced ~ players$minutes)\nplot(players$balls.faced ~ players$runs)\nplot(players$balls.faced ~ players$top.team)\nplot(players$balls.faced ~ players$first)\nplot(players$balls.faced ~ players$home)\nplot(players$balls.faced ~ players$strike.rate)\nplot(players$year ~ players$top.team)\n\n# explore relationships between variables\ncor.test(players$balls.faced, players$runs, method = \"pearson\")\ncor.test(players$balls.faced, players$minutes, method = \"pearson\") # as expected highly correlated, interchangeable without loss\ncor.test(players$balls.faced, players$year, method = \"pearson\")\ncor.test(players$balls.faced, players$position, method = \"pearson\")\ncor.test(players$balls.faced, players$goodsr, method = \"pearson\")\n\n# --------------------------------------------\n# Plot Base Survival Curves\n# --------------------------------------------\ntendulkar <- players %>% filter(player == \"SR Tendulkar\")\nganguly <- players %>% filter(player == \"SC Ganguly\")\nsc.tendu <- Surv(tendulkar$balls.faced, tendulkar$event)\nsc.ganguly <- Surv(ganguly$balls.faced, ganguly$event)\nsc.all <- Surv(players$balls.faced, players$event)\n\n# plot KM survival curves for Tendulkar\nscfit.tendu <- survfit(sc.tendu ~ 1, type = \"kaplan-meier\")\n# scfit.fh.tendu <- survfit(sc.tendu ~ 1, type = \"fleming-harrington\")\nsummary(scfit.tendu)\nplot(scfit.tendu, xlab = \"balls faced\", ylab = \"probability of survival\", main = \"Survival Curve for Tendulkar - KM Fit\")\n\n# make prettier plot\n?ggsurvplot\nggsurvplot(scfit.tendu, \n           data = tendulkar,\n           pval = TRUE,\n           conf.int = TRUE,\n           #fun = 'cumhaz',\n           surv.median.line = \"hv\",\n           risk.table = 'percentage',\n           risk.table.pos = \"in\",\n           ggtheme = theme_bw(),\n           tables.theme = theme_bw(),\n           palette = rainbow(1),\n           conf.int.fill = rainbow(1),\n           censor = FALSE,\n           legend = \"none\",\n           xlab = \"balls faced\",\n           ylab = \"probability of survival\",\n           title = \"Survival Curve for Tendulkar - KM Fit\"\n           )\n\n# plot KM survival curves for Ganguly\nscfit.ganguly <- survfit(sc.ganguly ~ 1, type = \"kaplan-meier\")\n# scfit.fh.ganguly <- survfit(sc.ganguly ~ 1, type = \"fleming-harrington\")\nsummary(scfit.ganguly)\nplot(scfit.ganguly, xlab = \"balls faced\", ylab = \"probability of survival\", main = \"Survival Curve for Ganguly - KM Fit\")\n\n# plot KM survival curves for all players\nscfit.all <- survfit(sc.all ~ 1, type = \"kaplan-meier\")\nsummary(scfit.all)\nplot(scfit.all, xlab = \"balls faced\", ylab = \"probability of survival\", main = \"Survival Curve for All Players - KM Fit\")\n\n# create dataframe to compare just two players\nplayers.two <- players %>% filter(player %in% c(\"SR Tendulkar\", \"SC Ganguly\"))\n\n# plot and compare KM survival curves for two players\ngroup <- players.two$player\nsc.two <- Surv(players.two$balls.faced, players.two$event)\nscfit.two <- survfit(sc.two ~ group, type = \"kaplan-meier\")\nplot(scfit.two, xlab = \"balls faced\", ylab = \"probability of survival\", main = \"Survival Curve Comparison\", col = c('black', 'red'))\nN <- length(unique(group))\nlegend(\"topright\", text.col = c('black', 'red'), legend=unique(group), col=1:N)\n\n# make prettier plot\nggsurvplot(scfit.two, \n           data = players.two,\n           pval = TRUE,\n           conf.int = TRUE,\n           #fun = 'cumhaz',\n           surv.median.line = \"hv\",\n           risk.table = 'percentage',\n           risk.table.col = \"strata\",\n           linetype = \"strata\",\n           ggtheme = theme_bw(),\n           tables.theme = theme_bw(),\n           palette = rainbow(2),\n           censor = FALSE,\n           legend = \"top\",\n           legend.labs = c(\"Tendulkar\", \"Ganguly\"),\n           xlab = \"balls faced\",\n           ylab = \"probability of survival\",\n           title = \"Survival Curve for Tendulkar vs Ganguly - KM Fit\"\n)\n\n# plot hazard function and cumulative event probability, proportion of event occurrence (getting out) as balls faced increase\nplot(scfit.tendu, fun=\"cumhaz\") # cum. hazard function, f(y) = -log(y)\nplot(scfit.tendu, fun=\"event\") # cum. event probability, f(y) = 1-y\nplot(scfit.tendu, fun=\"cloglog\") # log of cumulative event probability\n\n# comparison of two players\nplot(scfit.two, fun=\"cumhaz\",  col = c('black', 'red'))\nN <- length(unique(group))\nlegend(\"bottomright\", text.col = c('black', 'red'), legend=unique(group), col=1:N)\n\nplot(scfit.two, fun=\"event\",  col = c('black', 'red'))\nN <- length(unique(group))\nlegend(\"bottomright\", text.col = c('black', 'red'), legend=unique(group), col=1:N)\n\nplot(scfit.two, fun=\"cloglog\",  col = c('black', 'red'))\nN <- length(unique(group))\nlegend(\"bottomright\", text.col = c('black', 'red'), legend=unique(group), col=1:N)\n\n\n# --------------------------------------------\n# Plot Survival Curves for Impact of Factors / Covariates\n# --------------------------------------------\n# Major variables to test:\n#   1. home\n#   2. first\n#   3. top.team\n#   4. position\n\n# check converge of survival curves for each factor\n# divergence or crossing over time, indicates likely violation of proportional hazards assumption\n# 1. home vs. away tests\ngroup <- tendulkar$home\nscfit.tendu <- survfit(sc.tendu ~ group)\nplot(scfit.tendu, fun=\"cloglog\")\n\ngroup <- players$home\nscfit.all <- survfit(sc.all ~ group)\nplot(scfit.all, fun=\"cloglog\")\n\n# 2. first vs. second innings\ngroup <- players$first\nscfit.all <- survfit(sc.all ~ group)\nplot(scfit.all, fun=\"cloglog\")\n\n# 3. top team\ngroup <- players$top.team\nscfit.all <- survfit(sc.all ~ group)\nplot(scfit.all, fun=\"cloglog\")\n\n# 4. position\ngroup <- players$position\nscfit.all <- survfit(sc.all ~ group)\nplot(scfit.all, fun=\"cloglog\")\n\n# 1. home vs. away tests\n# compare survival curves based on impact of variables\n# determine impact of home vs away tests for Tendulkar\ngroup <- tendulkar$home\nscfit.tendu <- survfit(sc.tendu ~ group)\nplot(scfit.tendu, xlab = \"balls faced\", ylab = \"probability of survival\", main = \"Impact of Home vs Away for Tendulkar\", col = c('black', 'red'))\nleg.txt <- c(\"Away\", \"Home\")\nlegend(\"topright\", leg.txt, text.col = c('black', 'red'), bty = 'n')\n\n# determine impact of home vs away tests for Ganguly\ngroup <- ganguly$home\nscfit.ganguly <- survfit(sc.ganguly ~ group)\nplot(scfit.ganguly, xlab = \"balls faced\", ylab = \"probability of survival\", main = \"Impact of Home vs Away for Ganguly\", col = c('black', 'red'))\nleg.txt <- c(\"Away\", \"Home\")\nlegend(\"topright\", leg.txt, text.col = c('black', 'red'), bty = 'n')\n\n# determine impact of home vs away tests for all players\ngroup <- players$home\nscfit.all <- survfit(sc.all ~ group)\nplot(scfit.all, xlab = \"balls faced\", ylab = \"probability of survival\", main = \"Impact of Home vs Away for All Players\", col = c('black', 'red'))\nleg.txt <- c(\"Away\", \"Home\")\nlegend(\"topright\", leg.txt, text.col = c('black', 'red'), bty = 'n')\n\n\n# 2. first vs. second innings\n# determine impact of batting innning\ngroup <- tendulkar$inninng\nscfit.tendu <- survfit(sc.tendu ~ group)\nplot(scfit.tendu, xlab = \"balls faced\", ylab = \"probability of survival\", main = \"Impact of Inninngs\", col = rainbow(4))\nN <- length(unique(group))\nlegend(\"topright\", text.col = rainbow(4), legend=unique(group), col=1:N)\n\n# determine impact of batting in first vs second inning\ngroup <- tendulkar$first\nscfit.tendu <- survfit(sc.tendu ~ group)\nplot(scfit.tendu, xlab = \"balls faced\", ylab = \"probability of survival\", main = \"Impact of Innings\", col = c('black', 'red'))\nleg.txt <- c(\"First\", \"Second\")\nlegend(\"topright\", leg.txt, text.col = c('black', 'red'), bty = 'n')\n\n# make prettier plot\nggsurvplot(scfit.tendu, \n           data = tendulkar,\n           pval = TRUE,\n           conf.int = TRUE,\n           #fun = 'cumhaz',\n           surv.median.line = \"hv\",\n           risk.table = 'percentage',\n           risk.table.col = \"strata\",\n           linetype = \"strata\",\n           ggtheme = theme_bw(),\n           tables.theme = theme_bw(),\n           palette = rainbow(2),\n           censor = FALSE,\n           legend = \"top\",\n           legend.labs = c(\"First\", \"Second\"),\n           ncensor.plot = TRUE, \n           xlab = \"balls faced\",\n           ylab = \"probability of survival\",\n           title = \"Impact of Innings\"\n)\n\n# for all players\ngroup <- players$first\nscfit.all <- survfit(sc.all ~ group)\nplot(scfit.all, xlab = \"balls faced\", ylab = \"probability of survival\", main = \"Impact of Innings for all Players\", col = c('black', 'red'))\nleg.txt <- c(\"First\", \"Second\")\nlegend(\"topright\", leg.txt, text.col = c('black', 'red'), bty = 'n')\n\n\n# 3. top team\n# for Tendulkar\ngroup <- tendulkar$top.team\nscfit.tendu <- survfit(sc.tendu ~ group)\nplot(scfit.tendu, xlab = \"balls faced\", ylab = \"probability of survival\", main = \"Impact of Top Team for Tendulkar\", col = c('black', 'red'))\n# N <- length(unique(group))\n# legend(\"topright\", text.col = c('black', 'red'), legend=unique(group), col=1:N)\nleg.txt <- c(\"Not Top\", \"Top\")\nlegend(\"topright\", leg.txt, text.col = c('black', 'red'), bty = 'n')\n\n# for Ganguly\ngroup <- ganguly$top.team\nscfit.ganguly <- survfit(sc.ganguly ~ group)\nplot(scfit.ganguly, xlab = \"balls faced\", ylab = \"probability of survival\", main = \"Impact of Top Team for Ganguly\", col = c('black', 'red'))\nleg.txt <- c(\"Not Top\", \"Top\")\nlegend(\"topright\", leg.txt, text.col = c('black', 'red'), bty = 'n')\n\n# for all players\ngroup <- players$top.team\nscfit.all <- survfit(sc.all ~ group)\nplot(scfit.all, xlab = \"balls faced\", ylab = \"probability of survival\", main = \"Impact of Top Team for All Players\", col = c('black', 'red'))\nleg.txt <- c(\"Not Top\", \"Top\")\nlegend(\"topright\", leg.txt, text.col = c('black', 'red'), bty = 'n')\n\n\n# 4. position\n# for Tendulkar\ngroup <- tendulkar$position\nN <- length(unique(group))\nscfit.tendu <- survfit(sc.tendu ~ group)\nplot(scfit.tendu, xlab = \"balls faced\", ylab = \"probability of survival\", main = \"Impact of Top Team for Tendulkar\", col = rainbow(N))\nlegend(\"topright\", text.col = rainbow(N), legend=unique(group), col=1:N)\n\n# for Ganguly\ngroup <- ganguly$position\nscfit.ganguly <- survfit(sc.ganguly ~ group)\nN <- length(unique(group))\nplot(scfit.ganguly, xlab = \"balls faced\", ylab = \"probability of survival\", main = \"Impact of Top Team for Ganguly\", col = rainbow(N))\nlegend(\"topright\", text.col = rainbow(N), legend=unique(group), col=1:N)\n\n# for all players\ngroup <- players$position\nN <- length(unique(group))\nscfit.all <- survfit(sc.all ~ group)\nplot(scfit.all, xlab = \"balls faced\", ylab = \"probability of survival\", main = \"Impact of Top Team for All Players\", col = rainbow(N))\nlegend(\"topright\", text.col = rainbow(N), legend=unique(group), col=1:N)\n\n\n# --------------------------------------------\n# Log Rank Test\n# --------------------------------------------\n# for univariate analysis (categorical variables)\n#   1. home           (1 = home, 0 = away)\n#   2. first          (1 = first innning, 2 = second inning)\n#   3. top.team       (0 = not a top team, 1 = playing against a top team)\n\n# this is a non-parametric test that tests the statistical significance\n# of the different factors identified above \n# the null hypothesis is that the factor has no significant impact \n# (i.e. the survival curves are statistically identical)\n\n# calculate survdiff, log-rank test for stat sig.\n# rho=0 log-rank (Mantel-Haenszel test)\n# rho=1 Peto & Peto modification of the Gehan-Wilcoxon test\n\n# note: a problem with testing p-value for all players is that the sample size is effectively too large\n# must test for smaller sample sizes or use log(-log) plot for earlier\n\n\n# 1. home or away test\n# for tendulkar\nsurvdiff(sc.tendu ~ tendulkar$home, rho=0)\nsurvdiff(sc.tendu ~ tendulkar$home, rho=1)\n# for ganguly\nsurvdiff(sc.ganguly ~ ganguly$home, rho=0)\nsurvdiff(sc.ganguly ~ ganguly$home, rho=1)\n# for all players\nsurvdiff(sc.all ~ players$home, rho=0)\nsurvdiff(sc.all ~ players$home, rho=1)\n\n# 2. first or second innings\n# for tendulkar\nsurvdiff(sc.tendu ~ tendulkar$first, rho=0)\nsurvdiff(sc.tendu ~ tendulkar$first, rho=1)\n# for ganguly\nsurvdiff(sc.ganguly ~ ganguly$first, rho=0)\nsurvdiff(sc.ganguly ~ ganguly$first, rho=1)\n# for all players\nsurvdiff(sc.all ~ players$first, rho=0)\nsurvdiff(sc.all ~ players$first, rho=1)\n\n# 3. top team or not\n# for tendulkar\nsurvdiff(sc.tendu ~ tendulkar$top.team, rho=0)\nsurvdiff(sc.tendu ~ tendulkar$top.team, rho=1)\n# for ganguly\nsurvdiff(sc.ganguly ~ ganguly$top.team, rho=0)\nsurvdiff(sc.ganguly ~ ganguly$top.team, rho=1)\n# for all players\nsurvdiff(sc.all ~ players$top.team, rho=0)\nsurvdiff(sc.all ~ players$top.team, rho=1)\n# p values good for top.team\n\n\n# plot survdiff\n\n# 1. home or away test\n# for tendulkar\ngroup <- tendulkar$home\nscfit.tendu <- survfit(sc.tendu ~ group)\nsurvdiffplot(scfit.tendu)\n# for all players\ngroup <- players$home\nscfit.all <- survfit(sc.all ~ group)\nsurvdiffplot(scfit.all)\n# significant till about 240 balls\n\n# 2. first or second innings\n# for all players\ngroup <- players$first\nscfit.all <- survfit(sc.all ~ group)\nsurvdiffplot(scfit.all)\n# significant till about 330 balls\n\n# 3. top team or not\n# for tendulkar\ngroup <- tendulkar$top.team\nscfit.tendu <- survfit(sc.tendu ~ group)\nsurvdiffplot(scfit.tendu)\n# for all players\ngroup <- players$top.team\nscfit.all <- survfit(sc.all ~ group)\nsurvdiffplot(scfit.all)\n# significant till about 350 balls\n\n# plot survival curve fits for variables: home and top.team\nfit <- survfit(sc.all ~ home + top.team, data = players)\nggsurv <- ggsurvplot(fit, fun = \"cumhaz\", conf.int = TRUE, ggtheme = theme_bw())\nggsurv$plot + theme_bw() + \n  theme (legend.position = \"bottom\") +\n  facet_grid(. ~ home)\n\nggsurv$plot + theme_bw() + \n  theme (legend.position = \"bottom\") +\n  facet_grid(. ~ top.team)\n\n# plot survival curve fits for variables: top.team and first\nfit <- survfit(sc.all ~ first + top.team, data = players)\nggsurv <- ggsurvplot(fit, fun = \"cumhaz\", conf.int = TRUE, ggtheme = theme_bw())\nggsurv$plot + theme_bw() + \n  theme (legend.position = \"bottom\") +\n  facet_grid(. ~ first)\n\n# plot survival curve fits for variables: home and first\nfit <- survfit(sc.all ~ first + home, data = players)\nggsurv <- ggsurvplot(fit, fun = \"cumhaz\", conf.int = TRUE, ggtheme = theme_bw())\nggsurv$plot + theme_bw() + \n  theme (legend.position = \"bottom\") +\n  facet_grid(. ~ home)\n\n# factors to consider: home, top.team, first\n\n# --------------------------------------------\n# Cox Proportional Hazards Regression Model\n# --------------------------------------------\n# for multivariate analysis\n#   1. home\n#   2. top.team\n#   3. years.played\n#   4. position\n#   5. first\n# the cox model uses the hazard ratio of two hazard functions and is hence a \n# proportional hazard model that assumes the ratio does not change with time\n# verify hazard proportionality assumption (residuals not correlated w time)\n# cox.zph correlates the corresponding set of scaled Schoenfeld residuals with time\n# there should be a non-significant relationship between residuals and time\n\n# Schoenfeld residuals to check the proportional hazards assumption\n# cox.zph() correlates the corresponding set of scaled Schoenfeld residuals with time\n\n# note: a problem with testing p-value for all players is that the sample size is effectively too large\n# must test for smaller sample sizes or use log(-log) plot for earlier\n\n# univariate analysis\n# 1. home or away test\n# tendulkar\ncoxfit.home <- coxph(sc.tendu ~ tendulkar$home)\nsummary(coxfit.home)\ncox.zph(coxfit.home)\nplot(cox.zph(coxfit.home))\nggcoxzph(cox.zph(coxfit.home))\n# assume proportional hazards (i.e. not correlated with time/balls faced)\n# for all players\ncoxfit.home <- coxph(sc.all ~ players$home)\nsummary(coxfit.home)\ncox.zph(coxfit.home)\nplot(cox.zph(coxfit.home))\nggcoxzph(cox.zph(coxfit.home))\n# assume proportional hazards (i.e. not correlated with time/balls faced)\n# hazard reduced by a factor of 0.94, i.e. batsman perform better at home than away\n# p=value significant, null hypothesis rejected\n\n# 2. top team or not\n# tendulkar\ncoxfit.top.team <- coxph(sc.tendu ~ tendulkar$top.team)\nsummary(coxfit.top.team)\ncox.zph(coxfit.top.team)\nplot(cox.zph(coxfit.top.team))\nggcoxzph(cox.zph(coxfit.top.team))\n# assume proportional hazards (i.e. not correlated with time/balls faced)\n# for all players\ncoxfit.top.team <- coxph(sc.all ~ players$top.team)\nsummary(coxfit.top.team)\ncox.zph(coxfit.top.team)\nplot(cox.zph(coxfit.top.team))\nggcoxzph(cox.zph(coxfit.top.team))\n# assume proportional hazards (i.e. not correlated with time/balls faced)\n# hazard increased by a factor of 1.08, i.e. playing top teams is harder for batsman\n# p=value significant, null hypothesis rejected\n\n# 3. years playing\n# tendulkar\ncoxfit.years.played <- coxph(sc.tendu ~ tendulkar$years.played)\nsummary(coxfit.years.played)\ncox.zph(coxfit.years.played)\nplot(cox.zph(coxfit.years.played))\nggcoxzph(cox.zph(coxfit.years.played))\n# assume proportional hazards (i.e. not correlated with time/balls faced)\n# for all players\ncoxfit.years.played <- coxph(sc.all ~ players$years.played)\nsummary(coxfit.years.played)\ncox.zph(coxfit.years.played)\nplot(cox.zph(coxfit.years.played))\nggcoxzph(cox.zph(coxfit.years.played))\n# assume proportional hazards (i.e. not correlated with time/balls faced)\n# hazard reduced by a factor of 0.99, not a significant factor\n\n# 4. position\n# tendulkar\ncoxfit.position <- coxph(sc.tendu ~ tendulkar$position)\nsummary(coxfit.position)\ncox.zph(coxfit.position)\nplot(cox.zph(coxfit.position))\nggcoxzph(cox.zph(coxfit.position))\n# assume proportional hazards (i.e. not correlated with time/balls faced)\n# for all players\ncoxfit.position <- coxph(sc.all ~ players$position)\nsummary(coxfit.position)\ncox.zph(coxfit.position)\nplot(cox.zph(coxfit.position))\nggcoxzph(cox.zph(coxfit.position))\n# hazard reduced by a factor of 0.99, not a significant factor\n\n# 5. test for first vs second innings\n# tendulkar\ncoxfit.first <- coxph(sc.tendu ~ tendulkar$first)\nsummary(coxfit.first)\ncox.zph(coxfit.first)\nplot(cox.zph(coxfit.first))\nggcoxzph(cox.zph(coxfit.first))\n# for all players\ncoxfit.first <- coxph(sc.all ~ players$first)\nsummary(coxfit.first)\ncox.zph(coxfit.first)\nplot(cox.zph(coxfit.first))\nggcoxzph(cox.zph(coxfit.first))\n# proportional hazards assumption violated (i.e. hazard correlated with time/balls faced)\n# variable: first - no good, residuals autocorrelated\n\n\n# multivariate analysis - impact of two or more variables\n# examine residuals from all three variables\ncoxfit <- coxph(sc.all ~ players$home + players$top.team + players$years.played) \nsummary(coxfit)\ncox.zph(coxfit)\n# years played not significant in the overall model as well\n\n# examine for home and top.team\ncoxfit <- coxph(sc.tendu ~ tendulkar$home + tendulkar$top.team)\nsummary(coxfit)\ncox.zph(coxfit)\nplot(cox.zph(coxfit))\nggcoxzph(cox.zph(coxfit))\n# all players\ncoxfit <- coxph(sc.all ~ players$home + players$top.team)\nsummary(coxfit)\ncox.zph(coxfit)\nplot(cox.zph(coxfit))\nggcoxzph(cox.zph(coxfit))\n# p-values are significant and so null hypothesis (all hazard betas are 0) can be rejected\n\n# plot effect of all variables\nfit <- survfit(coxfit , data = players)\nggsurvplot(fit, conf.int = TRUE, censor = FALSE, ggtheme = theme_bw())\n\n\n# # reduce size of dataset (for ease of handling)\n# players.sm <- players %>% filter(player == \"SR Tendulkar\")\n# sc.small <- Surv(players.sm$balls.faced, players.sm$event)\n# coxfit.sm <- coxph(sc.small ~ players.sm$home + players.sm$top.team)\n# \n# # visualize impact of each variable\n# temp.home <- with(players.sm, data.frame(home = c(0, 1), top.team = c(1, 1)))\n# temp.tt <- with(players.sm, data.frame(home = c(0, 0), top.team = c(0, 1)))\n# \n# # plot effect of each variable\n# coxfit.home <- survfit(coxfit.sm, data = players.sm, newdata = temp.home)\n# ggsurvplot(coxfit.home, conf.int = TRUE, ggtheme = theme_bw())\n# coxfit.tt <- survfit(coxfit.sm, data = players.sm, newdata = temp.tt)\n# ggsurvplot(coxfit.tt, conf.int = TRUE, ggtheme = theme_bw())\n\n\n# Martingale residual to assess outliers and nonlinearity for continous variables (none in this case)\ncoxfit <- coxph(sc.all ~ players$home + players$top.team)\nggcoxdiagnostics(coxfit, type = \"dfbeta\", linear.predictions = FALSE)\n# no major outliers discovered\nggcoxdiagnostics(coxfit, type = \"deviance\",\n                 linear.predictions = FALSE, ggtheme = theme_bw())\n# pattern of deviance residuals (normalized martingale) symmetric around zero\n\n# reduce r session ram\nrm(fit)\nrm(sc.ganguly)\nrm(sc.tendu)\nrm(sc.two)\nrm(scfit.two)\nrm(scfit.ganguly)\nrm(scfit.tendu)\nrm(scfit.all)\nrm(sc.all)\nrm(coxfit)\nrm(coxfit.first)\nrm(coxfit.home)\nrm(coxfit.top.team)\nrm(coxfit.years.played)\nrm(rest.stats)\nrm(players.two)\nrm(ganguly)\nrm(tendulkar)\n\n# findings\n# ---------\n# relevant factors to analyze for clustering are: \n# 1. batsman playing home or away tests (home)\n# 2. batsman playing top team or not (top.team)\n# the following factors were deemed insufficient: first, years.played, position\n\n\n# --------------------------------------------\n# Identify Likely Parametric Distribution and Plot Regression Fit\n# --------------------------------------------\n# run regression to fit distribution\nfit_exp <- survreg(sc.all ~ 1, dist = \"exponential\")\nsummary(fit_exp)\nfit_weibull <- survreg(sc.all ~ 1, dist=\"weibull\")\nsummary(fit_weibull)\nfit_gauss <- survreg(sc.all ~ 1, dist=\"gaussian\")\nsummary(fit_gauss)\nfit_logistic <- survreg(sc.all ~ 1, dist=\"logistic\")\nsummary(fit_logistic)\nfit_lognormal <- survreg(sc.all ~ 1, dist=\"lognormal\")\nsummary(fit_lognormal)\nfit_loglogistic <- survreg(sc.all ~ 1, dist=\"loglogistic\")\nsummary(fit_loglogistic)\n\n# try distributions in flexsurv package\nfit_exp <- flexsurvreg(sc.all ~ 1, dist=\"exp\")\nplot(fit_exp)\nfit_weibull <- flexsurvreg(sc.all ~ 1, dist=\"weibull\")\nplot(fit_weibull)\nfit_gamma <- flexsurvreg(sc.all ~ 1, dist=\"gamma\")\nplot(fit_gamma)\nfit_gengamma <- flexsurvreg(sc.all ~ 1, dist=\"gengamma\")\nplot(fit_gengamma)\nfit_genf <- flexsurvreg(sc.all ~ 1, dist=\"genf\")\nplot(fit_genf)\nfit_lognormal <- flexsurvreg(sc.all ~ 1, dist=\"lnorm\")\nplot(fit_lognormal)\n\n# Check log-likelihood to compare fits\nfit_exp$loglik\nfit_weibull$loglik\nfit_gamma$loglik\nfit_gengamma$loglik\nfit_lognormal$loglik\n# exponential distribution looks best\n\n# Check AIC to compare fits\n# Akaike information criterion (AIC) is an estimator of the relative quality of models\nfit_exp$AIC\nfit_weibull$AIC\nfit_gamma$AIC\nfit_gengamma$AIC\nfit_lognormal$AIC\n# confirms choice of exponential\n\n# probability plots to test for distribution\nprobplot(players$balls.faced)\nprobplot(players$balls.faced, \"qunif\")\nprobplot(players$balls.faced, \"qexp\")\nprobplot(players$balls.faced, \"qnorm\")\nprobplot(players$balls.faced, \"qweibull\", shape = 1)\nprobplot(players$balls.faced, \"qlnorm\")\nprobplot(players$balls.faced, \"qgamma\", shape = 1)\n\n# confirms choice of exponential, PH assumption valid furthermore as exp(x) is memoryless\n\n\n# --------------------------------------------\n# Cluster Analysis\n# --------------------------------------------\n# prepare dataset of players for k-means clustering\n# based on above analysis there are two dimensions / factors to use:\n# 1. home - batsman performance in home vs away tests\n# 2. top.team - batsman performance vs top teams\n# use the metric of balls.faced normalized by strike rate and player average\n\n# check restricted means, this reveals the expected \n# median for when the survival probability is at 50%\nrest.stats <- get_restricted_mean(cricinfo, players)\nnames(rest.stats)[1] <- \"player\"\nplayers <- inner_join(players, rest.stats)\nplot(players$rmean ~ players$rmedian) \n\n# prepare dataset for clustering based on above analysis\nnames(players)\n\n# spread key factors: top team for key column variables\nplayers.cluster <- subset(players, select = c(runs, balls.faced, player, team, opposition, year, event, home, avg, cohort, top.team, strike.rate))\nplayers.cluster <- players.cluster %>% group_by(player, top.team) %>% summarise(runs=sum(runs), bats = n(), outs = sum(event), meanBF=mean(balls.faced))\nplayers.cluster$average <- players.cluster$runs / players.cluster$outs\ntmp <- players.cluster %>% filter(bats <= 20 | runs < 1000)\n# spread mean balls faced\nmeanBF <- subset(players.cluster, select = c(player, top.team, meanBF))\nmeanBF <- spread(meanBF, top.team, meanBF)\nnames(meanBF) <- c(\"player\", \"nt.meanBF\", \"tt.meanBF\")\n# spread average\naverage <- subset(players.cluster, select = c(player, top.team, average))\naverage <- spread(average, top.team, average)\nnames(average) <- c(\"player\", \"nt.average\", \"tt.average\")\nfinal.tt <- inner_join(meanBF, average)\n\n# spread key factors: home and away for key column variables\nplayers.cluster <- subset(players, select = c(runs, balls.faced, player, team, opposition, year, event, home, avg, cohort, top.team, strike.rate))\nplayers.cluster <- players.cluster %>% group_by(player, home) %>% summarise(runs=sum(runs), bats = n(), outs = sum(event), meanBF=mean(balls.faced))\nplayers.cluster$average <- players.cluster$runs / players.cluster$outs\ntmp2 <- players.cluster %>% filter(bats <= 20 | runs < 1000)\ntmp3 <- full_join(tmp, tmp2)\n# spread mean balls faced\nmeanBF <- subset(players.cluster, select = c(player, home, meanBF))\nmeanBF <- spread(meanBF, home, meanBF)\nnames(meanBF) <- c(\"player\", \"away.meanBF\", \"home.meanBF\")\n# spread average\naverage <- subset(players.cluster, select = c(player, home, average))\naverage <- spread(average, home, average)\nnames(average) <- c(\"player\", \"away.average\", \"home.average\")\nfinal.ha <- inner_join(meanBF, average)\n\n\n# create final dataset for cluster analysis\nfinal <- inner_join(final.tt, final.ha, by = \"player\")\n\n# remove players with insufficient data for comparison\ntmp <- as.data.frame(unique(tmp3$player))\nnames(tmp) <- \"remove\"\nfinal <- subset(final, !(player %in% tmp$remove))\n\n# create and add subset of additional data, avg, rmean and rmedian\ntmp2 <- subset(players, select = c(player, avg, cohort))\ntmp2 <- tmp2[!duplicated(tmp2), ]\nfinal <- inner_join(final, tmp2, by = \"player\")\n\n# calculate average based on data\nplayers.cluster <- subset(players, select = c(runs, player, event))\nplayers.cluster <- players.cluster %>% group_by(player) %>% summarise(runs=sum(runs), outs = sum(event))\nplayers.cluster$calcavg <- players.cluster$runs / players.cluster$outs\nplayers.cluster <- subset(players.cluster, select = c(player, calcavg))\nfinal <- inner_join(final, players.cluster, by = \"player\")\n\n# remove any NA rows\nfinal <- na.omit(final)\n\n# two metrics are created to compare the two factors\n# 1. a measure of consistency\n# 2. a measure of performance in tough conditions (i.e. against top teams and in away conditions)\n# cap good performances in easy conditions\nfinal <- final %>% mutate(nt.lower = ifelse(nt.average > calcavg, calcavg, nt.average))\nfinal$topteam <- final$tt.average - final$nt.lower\nfinal <- final %>% mutate(home.lower = ifelse(home.average > calcavg, calcavg, home.average))\nfinal$home <- final$away.average - final$home.lower\n# calculate standard deviation of home and top team averages\nfinal$sigma <- apply(final[,c(5,13,8,15)], 1, sd)\n# calculate metric 1 for consistency\nfinal$metric1 <- final$avg * (1 - final$sigma / final$calcavg)\n# calculate metric 2 for performance\nfinal$metric2 <- final$avg * (1 + (final$topteam + final$home - final$sigma)/ final$calcavg)\n\n# prepare subset for cluster analysis\nnames(final)\nfinal <- subset(final, select = c(player, metric1, metric2, cohort))\n\n# normalize the dataset\nfinal$metric1 <- scale(final$metric1)\nfinal$metric2 <- scale(final$metric2)\n\n# save back up for cluster analysis\n# write.csv(final, file=\"cluster_backup.csv\", row.names = FALSE)\n\n# rename row names to player names\ntmp <- final$player\nfinal <- subset(final, select = -c(player, cohort))\nrow.names(final) <- tmp\nscaled.final <- final\ncov(scaled.final <- scale(final))\n\n# measure distance (i.e. similarlity between players)\ndistance <- get_dist(scaled.final, method = \"euclidean\")\nfviz_dist(distance, gradient = list(low = \"#00AFBB\", mid = \"white\", high = \"#FC4E07\"))\n\n# create clusters\nk <- kmeans(scaled.final, centers = 6, nstart = 25)\nstr(k)\nfviz_cluster(k, data = scaled.final)\n\n# check cluster quality and optimized number of clusters for dataset\nset.seed(123)\n\n# check optimal number of clusters, using within-cluster sum of squares\nfviz_nbclust(scaled.final, kmeans, method = \"wss\")\n# check quality of clusters\nfviz_nbclust(scaled.final, kmeans, method = \"silhouette\")\n# compute gap statistic\ngap_stat <- clusGap(scaled.final, FUN = kmeans, nstart = 25, K.max = 10, B = 50)\nprint(gap_stat, method = \"firstmax\")\nfviz_gap_stat(gap_stat)\n",
    "created" : 1516034275016.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "851125142",
    "id" : "1F2FAF5B",
    "lastKnownWriteTime" : 1517616597,
    "last_content_update" : 1517616597582,
    "path" : "D:/Github/Data_Test_Cricket/tidy_analysis.R",
    "project_path" : "tidy_analysis.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}