{
    "collab_server" : "",
    "contents" : "library(tidyr, warn.conflicts=FALSE, quietly=TRUE)\nlibrary(readr, warn.conflicts=FALSE, quietly=TRUE)\nlibrary(dplyr, warn.conflicts=FALSE, quietly=TRUE)\nlibrary(ggplot2, warn.conflicts=FALSE, quietly=TRUE)\nlibrary(shiny, warn.conflicts=FALSE, quietly=TRUE)\nlibrary(survival, warn.conflicts=FALSE, quietly=TRUE)\nlibrary(survminer, warn.conflicts=FALSE, quietly=TRUE)\nlibrary(rms, warn.conflicts=FALSE, quietly=TRUE)\nlibrary(DT, warn.conflicts=FALSE, quietly=TRUE)\nlibrary(cluster, warn.conflicts=FALSE, quietly=TRUE)\nlibrary(factoextra, warn.conflicts=FALSE, quietly=TRUE)\nlibrary(purrr, warn.conflicts=FALSE, quietly=TRUE)\nlibrary(shinythemes, warn.conflicts=FALSE, quietly=TRUE)\n\n# load key datasets\nplayers <- tbl_df(read.csv(\"data/players_backup.csv\", stringsAsFactors=FALSE))\ncluster_data <- tbl_df(read.csv(\"data/cluster_backup.csv\", stringsAsFactors=FALSE))\npalette(c(\"#E41A1C\", \"#377EB8\", \"#4DAF4A\", \"#984EA3\",\n          \"#FF7F00\", \"#FFFF33\", \"#A65628\", \"#F781BF\", \"#999999\"))\n\n# define ui\nui <-  fluidPage(theme = shinytheme(\"journal\"),\n      titlePanel(title=\"\", windowTitle=\"Chasing GOATs\"),\n      navbarPage(img(src = \"cap.webp\", height = 30, width = 30),\n            tabPanel(\"Introduction\",\n                     sidebarLayout(\n                       sidebarPanel(\n                         h1(strong(\"Because the Test is Greater Still\"), align = \"center\"),\n                         br(),\n                         p(em(\"a data driven exploration of Test cricket\"), align = \"center\"),\n                         br(),\n                         div(HTML('<center><img src=\"cricket.jpg\", style = \"height: 100%; width: 100%; object-fit: contain\"></center>')), \n                         br()\n                       ),\n                       mainPanel(\n                         includeHTML(\"notes/problem.html\")\n                       )\n                     )\n            ), \n            tabPanel(\"Methodology\",\n                     sidebarLayout(\n                       sidebarPanel(\n                         h4(strong(\"In Summary\")),\n                         includeHTML(\"notes/method_summary.html\"), \n                         br()\n                       ),\n                       mainPanel(\n                         includeHTML(\"notes/methodology.html\")\n                       )\n                     )\n            ),\n            tabPanel(\"Data\",\n                     # create a new Row in the UI for selectInputs\n                     fluidRow(\n                       column(4,\n                              selectInput(\"plyr\",\n                                          \"Player:\",\n                                          c(\"All\",\n                                            unique(as.character(players$player))))\n                       ),\n                       column(4,\n                              selectInput(\"tm\",\n                                          \"Team:\",\n                                          c(\"All\",\n                                            unique(as.character(players$team))))\n                       ),\n                       column(4,\n                              selectInput(\"coh\",\n                                          \"Cohort:\",\n                                          c(\"All\",\n                                            unique(as.character(players$cohort))))\n                       )\n                     ),\n                     # create a new row for the table\n                     fluidRow(\n                       DT::dataTableOutput(\"table\")\n                     )\n            ),\n            tabPanel(\"Play\",\n                      sidebarLayout(\n                        # create panel to pick plot options\n                        sidebarPanel(\n                          radioButtons(\"radio\", label = \"Pick to compare\",\n                                       choices = list(\"Players\" = 1, \"Teams\" = 2, \"Cohorts\" = 3),\n                                       selected = 1),\n                          \n                          uiOutput(\"ui\"), \n                          \n                          # checkboxes for two factors; home/away and top team\n                          checkboxInput(\"top\", \"Compare against top teams\", FALSE),\n                          checkboxInput(\"where\", \"Compare home vs away\", FALSE), \n                          checkboxInput(\"hazard\", \"Show cum. hazard plot\", FALSE), \n                          \n                          # action button to update graphs\n                          actionButton(inputId = \"update\", label = \"Plot\")\n                        ),\n                        # plot panel\n                        mainPanel(\n                          plotOutput(\"plotSurvival\")\n                        )\n                      )\n             ),\n            tabPanel(\"Discussion\",\n                     # pick cohort and cluster centers\n                     sidebarPanel(\n                       selectInput(\"cohort\", 'Pick one or more cohort', unique(cluster_data$cohort), multiple=TRUE, selectize=TRUE),\n                       numericInput('clusters', 'Cluster count', 5, min = 1, max = 9)\n                     ),\n                     # plot cluster\n                     mainPanel(\n                       plotOutput('plotCluster'), \n                       includeHTML(\"notes/discussion.html\")\n                     )\n            ),\n            tabPanel(\"Conclusion\",\n                     includeHTML(\"notes/conclusion.html\")\n                     \n            )\n\n  )\n)\n\n# define server logic\nserver <- function(input, output) {\n\n  # update select list based on radio button pick of player / team / cohort\n  output$ui <- renderUI({\n    switch(input$radio,\n           \"1\" = selectInput(\"selected\", 'Pick one or more', unique(players$player), multiple=TRUE, selectize=TRUE),\n           \"2\" = selectInput(\"selected\", 'Pick one or more', unique(players$team), multiple=TRUE, selectize=TRUE),\n           \"3\" = selectInput(\"selected\", 'Pick one or more', unique(players$cohort), multiple=TRUE, selectize=TRUE)\n    )\n  })\n  \n  # filter data based on selections\n  output$table <- DT::renderDataTable(DT::datatable({\n    show_data <- subset(players, select = c(runs, balls.faced, player, team, opposition, country, year, dismissal, event, home, top.team, cohort, avg, rmedian))\n    if (input$plyr != \"All\") {\n      show_data <- show_data[show_data$player == input$plyr,]\n    }\n    if (input$tm != \"All\") {\n      show_data <- show_data[show_data$team == input$tm,]\n    }\n    if (input$coh != \"All\") {\n      show_data <- show_data[show_data$cohort == input$coh,]\n    }\n    show_data}, options = list(pageLength = 25))\n  )\n\n  # filter players by pick of player / team / cohort\n  dataPlayers <- eventReactive(input$update, {\n    if (!is.null(input$selected)){\n      if (input$radio == \"1\") \n        players %>% filter(player %in% input$selected)\n      else if (input$radio == \"2\") \n        players %>% filter(team %in% input$selected)\n      else \n        players %>% filter(cohort %in% input$selected)\n    }\n    else \n      players\n  })\n  \n  # create group for survial curve analysis based on pick of player / team / cohort\n  dataGroup <- eventReactive(input$update, {\n    if (input$radio == \"1\")\n      dataPlayers()$player\n    else if (input$radio == \"2\") \n      dataPlayers()$team\n    else \n      dataPlayers()$cohort\n  })\n  \n  # update survival table reactively (maybe isolate, check lag)\n  dataSC <- eventReactive(input$update, {\n    Surv(dataPlayers()$balls.faced, dataPlayers()$event)\n  })\n  \n  group <- eventReactive(input$update, {\n    unlist(dataGroup())\n  })\n  \n  # create Kaplan-Meier survival curve fit based on whether variables home / top team were selected\n  dataFit <- eventReactive(input$update, {\n    if (!is.null(input$selected)){\n      if (input$top & input$where)\n        survfit(dataSC() ~ dataPlayers()$home + group() + dataPlayers()$top.team, type = \"kaplan-meier\")\n      else if (input$top & !input$where)\n        survfit(dataSC() ~ dataPlayers()$top.team + group(), type = \"kaplan-meier\")\n      else if (!input$top & input$where)\n        survfit(dataSC() ~ dataPlayers()$home + group(), type = \"kaplan-meier\")\n      else\n        survfit(dataSC() ~ group(), type = \"kaplan-meier\")\n    }\n    else\n      survfit(dataSC() ~ 1, type = \"kaplan-meier\")\n  })\n  \n  graphSC <- eventReactive(input$update, {\n    if (!input$hazard)\n       g <- ggsurvplot(dataFit(),\n                      data = dataPlayers(),\n                      # pval = TRUE,\n                      # conf.int = TRUE,\n                      surv.median.line = \"hv\",\n                      linetype = \"strata\",\n                      ggtheme = theme_bw(),\n                      tables.theme = theme_bw(),\n                      # facet.by = 2,\n                      # risk.table = 'percentage',\n                      # risk.table.col = \"strata\",\n                      # risk.table.height = 0.5,\n                      # tables.theme = theme_bw(),\n                      # palette = rainbow(N),\n                      # conf.int.fill = rainbow(N),\n                      # legend.labs = gsub(\"x=\",\"\",names(dataFit()$strata)),\n                      censor = FALSE,\n                      legend = \"bottom\",\n                      legend.horiz = FALSE,\n                      legend.ncol = 2,\n                      break.time.by = 50,\n                      xlab = \"balls faced\",\n                      ylab = \"probability of survival\"\n      )\n    else \n      g <- ggsurvplot(dataFit(),\n                      data = dataPlayers(),\n                      # pval = TRUE,\n                      # conf.int = TRUE,\n                      fun = 'cumhaz',\n                      linetype = \"strata\",\n                      ggtheme = theme_bw(),\n                      tables.theme = theme_bw(),\n                      # facet.by = 2,\n                      # risk.table = 'percentage',\n                      # risk.table.col = \"strata\",\n                      # risk.table.height = 0.5, \n                      # tables.theme = theme_bw(),\n                      # palette = rainbow(N),\n                      # conf.int.fill = rainbow(N),\n                      # legend.labs = gsub(\"x=\",\"\",names(dataFit()$strata)),\n                      censor = FALSE,\n                      legend = \"bottom\",\n                      legend.horiz = FALSE,\n                      legend.ncol = 2,\n                      break.time.by = 50,\n                      xlab = \"balls faced\",\n                      ylab = \"cumulative hazard\"\n      )\n      \n     \n     # if no player is selected\n     if (!is.null(input$selected)){\n       # if 2 or more players are selected facet the graph according to home / top team    \n       if (length(input$selected) >= 2) {\n         if (input$top & input$where)\n           g + facet_grid(top.team ~ home, labeller = label_both)\n         else if (input$top & !input$where)\n           g + facet_grid( ~ top.team, labeller = label_both)\n         else if (!input$top & input$where)\n           g + facet_grid( ~ home, labeller = label_both)\n         else \n           g\n       }\n       else {\n         # if only one player is being looked at\n         if (input$top & input$where)\n           g + facet_grid( ~ home, labeller = label_both)\n         else\n           g\n       }\n     }\n  })\n  \n  # output survival curve plots, facetted according to home / top team selection\n  output$plotSurvival <-renderPlot({\n    graphSC()\n  })\n  \n  # update cluster data based on cohort picks\n  selectedData <- reactive({\n    if (!is.null(input$cohort)) \n      data <- cluster_data %>% filter(cohort %in% input$cohort)\n    else\n      data <- cluster_data\n    tmp <- data$player\n    data <- subset(data, select = -c(player,cohort))\n    row.names(data) <- tmp\n    data\n  })\n  \n  # perform k-means cluster analysis\n  clusters <- reactive({\n    kmeans(selectedData(), centers = input$clusters, nstart = 25)\n  })\n  \n  # plot cluster diagram\n  output$plotCluster <- renderPlot({\n    fviz_cluster(clusters(), data = selectedData())\n\n    # par(mar = c(5.1, 4.1, 0, 1))\n    # plot(selectedData(),\n    #      col = clusters()$cluster,\n    #      pch = 20, cex = 3)\n    # points(clusters()$centers, pch = 4, cex = 4, lwd = 4)\n  })\n}\n\nshinyApp(ui = ui, server = server)",
    "created" : 1517260484258.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1124601232",
    "id" : "4424BF9F",
    "lastKnownWriteTime" : 1517636332,
    "last_content_update" : 1517636332658,
    "path" : "D:/Github/Data_Test_Cricket/app.R",
    "project_path" : "app.R",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}